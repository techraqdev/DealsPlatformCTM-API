// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Deals.Domain.Models;

namespace Infrastructure
{
    public partial class DealsPlatformContext : DbContext
    {
        public DealsPlatformContext(DbContextOptions<DealsPlatformContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AppMainMenu> AppMainMenus { get; set; }
        public virtual DbSet<AppPriv> AppPrivs { get; set; }
        public virtual DbSet<AppRoleMenu> AppRoleMenus { get; set; }
        public virtual DbSet<AppSubMenu> AppSubMenus { get; set; }
        public virtual DbSet<CfibProject> CfibProjects { get; set; }
        public virtual DbSet<ClientResponseDatum> ClientResponseData { get; set; }
        public virtual DbSet<CostCenter> CostCenters { get; set; }
        public virtual DbSet<CostCenterSubMenu> CostCenterSubMenus { get; set; }
        public virtual DbSet<CredProjectRestrictedReason> CredProjectRestrictedReasons { get; set; }
        public virtual DbSet<DataDump> DataDumps { get; set; }
        public virtual DbSet<DataDumpNonDealsSubSector> DataDumpNonDealsSubSectors { get; set; }
        public virtual DbSet<DisputeRequest> DisputeRequests { get; set; }
        public virtual DbSet<EmailReminder> EmailReminders { get; set; }
        public virtual DbSet<EngagementType> EngagementTypes { get; set; }
        public virtual DbSet<InputSearchTrackDetail> InputSearchTrackDetails { get; set; }
        public virtual DbSet<JobLog> JobLogs { get; set; }
        public virtual DbSet<MailQueue> MailQueues { get; set; }
        public virtual DbSet<MailStatusType> MailStatusTypes { get; set; }
        public virtual DbSet<MailTemplate> MailTemplates { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectCredDetail> ProjectCredDetails { get; set; }
        public virtual DbSet<ProjectCredLookup> ProjectCredLookups { get; set; }
        public virtual DbSet<ProjectCtmDetail> ProjectCtmDetails { get; set; }
        public virtual DbSet<ProjectCtmLookup> ProjectCtmLookups { get; set; }
        public virtual DbSet<ProjectMailDetail> ProjectMailDetails { get; set; }
        public virtual DbSet<ProjectPublicWebsite> ProjectPublicWebsites { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<ProjectWfAction> ProjectWfActions { get; set; }
        public virtual DbSet<ProjectWfLog> ProjectWfLogs { get; set; }
        public virtual DbSet<ProjectWfNextAction> ProjectWfNextActions { get; set; }
        public virtual DbSet<ProjectWfStatusType> ProjectWfStatusTypes { get; set; }
        public virtual DbSet<ProjectWfUserTypeAction> ProjectWfUserTypeActions { get; set; }
        public virtual DbSet<ProjectsAuditLog> ProjectsAuditLogs { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SbuLeader> SbuLeaders { get; set; }
        public virtual DbSet<SbuMonthlySummaryConfig> SbuMonthlySummaryConfigs { get; set; }
        public virtual DbSet<ShorDescClenup> ShorDescClenups { get; set; }
        public virtual DbSet<Taxonomy> Taxonomies { get; set; }
        public virtual DbSet<TaxonomyCategory> TaxonomyCategories { get; set; }
        public virtual DbSet<TaxonomyEngagementType> TaxonomyEngagementTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<VwCredProjUser> VwCredProjUsers { get; set; }
        public virtual DbSet<VwCtmProject> VwCtmProjects { get; set; }
        public virtual DbSet<VwProjClientEntityType> VwProjClientEntityTypes { get; set; }
        public virtual DbSet<VwProjDealType> VwProjDealTypes { get; set; }
        public virtual DbSet<VwProjDealValue> VwProjDealValues { get; set; }
        public virtual DbSet<VwProjDiscloseEntityName> VwProjDiscloseEntityNames { get; set; }
        public virtual DbSet<VwProjDownload> VwProjDownloads { get; set; }
        public virtual DbSet<VwProjNatureOfEngagement> VwProjNatureOfEngagements { get; set; }
        public virtual DbSet<VwProjParentRegion> VwProjParentRegions { get; set; }
        public virtual DbSet<VwProjProduct> VwProjProducts { get; set; }
        public virtual DbSet<VwProjSector> VwProjSectors { get; set; }
        public virtual DbSet<VwProjSubSector> VwProjSubSectors { get; set; }
        public virtual DbSet<VwProjTargetEntityType> VwProjTargetEntityTypes { get; set; }
        public virtual DbSet<VwProjTransactionStatus> VwProjTransactionStatuses { get; set; }
        public virtual DbSet<VwProjWorkRegion> VwProjWorkRegions { get; set; }
        public virtual DbSet<VwProjectCred> VwProjectCreds { get; set; }
        public virtual DbSet<VwProjectCredLookup> VwProjectCredLookups { get; set; }
        public virtual DbSet<VwProjectCredsV2> VwProjectCredsV2s { get; set; }
        public virtual DbSet<VwProjectRestrictedReason> VwProjectRestrictedReasons { get; set; }
        public virtual DbSet<VwPvtTest> VwPvtTests { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AppMainMenu>(entity =>
            {
                entity.ToTable("AppMainMenus", "DP");

                entity.Property(e => e.AppMainMenuId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AppPriv>(entity =>
            {
                entity.ToTable("AppPrivs", "DP");

                entity.Property(e => e.AppPrivId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AppRoleMenu>(entity =>
            {
                entity.ToTable("AppRoleMenus", "DP");

                entity.Property(e => e.AppRoleMenuId).ValueGeneratedNever();

                entity.HasOne(d => d.AppPriv)
                    .WithMany(p => p.AppRoleMenus)
                    .HasForeignKey(d => d.AppPrivId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AppRoleMenus_AppPrivId_fkey");

                entity.HasOne(d => d.AppSubMenu)
                    .WithMany(p => p.AppRoleMenus)
                    .HasForeignKey(d => d.AppSubMenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AppRoleMenus_AppSubMenuId_fkey");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AppRoleMenus)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AppRoleMenus_RoleId_fkey");
            });

            modelBuilder.Entity<AppSubMenu>(entity =>
            {
                entity.ToTable("AppSubMenus", "DP");

                entity.Property(e => e.AppSubMenuId).ValueGeneratedNever();

                entity.HasOne(d => d.AppMainMenu)
                    .WithMany(p => p.AppSubMenus)
                    .HasForeignKey(d => d.AppMainMenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AppSubMenus_AppMainMenuId_fkey");
            });

            modelBuilder.Entity<CfibProject>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("CfibProjects_pkey");

                entity.ToTable("CfibProjects", "DP");

                entity.Property(e => e.ProjectId).ValueGeneratedNever();

                entity.HasOne(d => d.Subsector)
                    .WithMany(p => p.CfibProjects)
                    .HasForeignKey(d => d.SubsectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CfibProjects_SubsectorId_fkey");
            });

            modelBuilder.Entity<ClientResponseDatum>(entity =>
            {
                entity.HasKey(e => e.ClientResponseId)
                    .HasName("ClientResponseData_pkey");

                entity.ToTable("ClientResponseData", "DP");

                entity.Property(e => e.ClientResponseId)
                    .HasColumnName("ClientResponseID")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.EngagementCode).IsRequired();

                entity.Property(e => e.Response).IsRequired();
            });

            modelBuilder.Entity<CostCenter>(entity =>
            {
                entity.ToTable("CostCenters", "DP");

                entity.Property(e => e.CostCenterId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CostCenterSubMenu>(entity =>
            {
                entity.HasKey(e => new { e.CostCenterId, e.AppSubMenuId })
                    .HasName("CostCenterSubMenus_pkey");

                entity.ToTable("CostCenterSubMenus", "DP");

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("(0)::bit(1)");

                entity.HasOne(d => d.AppSubMenu)
                    .WithMany(p => p.CostCenterSubMenus)
                    .HasForeignKey(d => d.AppSubMenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CostCenterSubMenus_AppSubMenuId_fkey");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.CostCenterSubMenus)
                    .HasForeignKey(d => d.CostCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CostCenterSubMenus_CostCenterId_fkey");
            });

            modelBuilder.Entity<CredProjectRestrictedReason>(entity =>
            {
                entity.HasKey(e => e.RestrictedReasonId)
                    .HasName("CredProjectRestrictedReasons_pkey");

                entity.ToTable("CredProjectRestrictedReasons", "DP");

                entity.Property(e => e.CreatedOn).HasColumnType("timestamp without time zone");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CredProjectRestrictedReasons)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CredProjectRestrictedReasons_ProjectId_fkey");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.CredProjectRestrictedReasons)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CredProjectRestrictedReasons_ReasonId_fkey");
            });

            modelBuilder.Entity<DataDump>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataDump", "DP");

                entity.Property(e => e.Sbu).HasColumnName("SBU");
            });

            modelBuilder.Entity<DataDumpNonDealsSubSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataDumpNonDealsSubSectors", "DP");
            });

            modelBuilder.Entity<DisputeRequest>(entity =>
            {
                entity.ToTable("DisputeRequests", "DP");

                entity.Property(e => e.DisputeRequestId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.DisputeRequests)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("DisputeRequests_CreatedBy_fkey");
            });

            modelBuilder.Entity<EmailReminder>(entity =>
            {
                entity.HasKey(e => e.ReminderId)
                    .HasName("EmailRemainders_pkey");

                entity.ToTable("EmailReminders", "DP");

                entity.Property(e => e.ReminderId).ValueGeneratedNever();

                entity.HasOne(d => d.EmailTemplate)
                    .WithMany(p => p.EmailReminders)
                    .HasForeignKey(d => d.EmailTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EmailRemainder_MailTemplate");
            });

            modelBuilder.Entity<EngagementType>(entity =>
            {
                entity.ToTable("EngagementTypes", "DP");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<InputSearchTrackDetail>(entity =>
            {
                entity.HasKey(e => e.InputSearchTrackDetailsId)
                    .HasName("InputSearchTrackDetails_pkey");

                entity.ToTable("InputSearchTrackDetails", "DP");

                entity.Property(e => e.InputSearchTrackDetailsId)
                    .HasColumnName("InputSearchTrackDetailsID")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.JsonDataContent).IsRequired();

                entity.Property(e => e.SearchCategoryType).IsRequired();

                entity.Property(e => e.UserId).IsRequired();
            });

            modelBuilder.Entity<JobLog>(entity =>
            {
                entity.ToTable("JobLogs", "DP");

                entity.Property(e => e.JobLogId).ValueGeneratedNever();

                entity.HasOne(d => d.EmailTemplate)
                    .WithMany(p => p.JobLogs)
                    .HasForeignKey(d => d.EmailTemplateId)
                    .HasConstraintName("JobLogs_EmailTemplateId_fkey");
            });

            modelBuilder.Entity<MailQueue>(entity =>
            {
                entity.ToTable("MailQueues", "DP");

                entity.Property(e => e.AttachedFilePaths).IsRequired();

                entity.Property(e => e.EmailBody).IsRequired();

                entity.Property(e => e.EmailFrom).IsRequired();

                entity.Property(e => e.EmailSubject).IsRequired();

                entity.Property(e => e.EmailTo).IsRequired();

                entity.HasOne(d => d.MailStatusType)
                    .WithMany(p => p.MailQueues)
                    .HasForeignKey(d => d.MailStatusTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("mailqueues_mailstatustypeId_fkey");
            });

            modelBuilder.Entity<MailStatusType>(entity =>
            {
                entity.ToTable("MailStatusTypes", "DP");

                entity.Property(e => e.MailStatusTypeId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<MailTemplate>(entity =>
            {
                entity.ToTable("MailTemplates", "DP");

                entity.Property(e => e.MailTemplateId).ValueGeneratedNever();

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.EmailBcc).IsRequired();

                entity.Property(e => e.EmailBody).IsRequired();

                entity.Property(e => e.EmailCc).IsRequired();

                entity.Property(e => e.EmailSubject).IsRequired();

                entity.Property(e => e.EmailTo).IsRequired();

                entity.Property(e => e.MailTemplate1)
                    .IsRequired()
                    .HasColumnName("MailTemplate");

                entity.Property(e => e.StageType).IsRequired();

                entity.Property(e => e.TemplateName).IsRequired();
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("Projects", "DP");

                entity.HasIndex(e => e.ClientName, "projects_clientname");

                entity.HasIndex(e => new { e.ProjectCode, e.IsDeleted }, "projects_projectcode_Isdeleted_key")
                    .IsUnique();

                entity.HasIndex(e => e.ProjectPartner, "projects_targetentityname");

                entity.HasIndex(e => e.TaskManager, "projects_taskmanager");

                entity.Property(e => e.ProjectId).ValueGeneratedNever();

                entity.Property(e => e.Canactive).HasColumnName("canactive");

                entity.Property(e => e.ClientName).IsRequired();

                entity.Property(e => e.ClienteMail).IsRequired();

                entity.Property(e => e.LTB).HasColumnName("LTB");

                entity.Property(e => e.ProjectCode).IsRequired();

                entity.Property(e => e.ProjectCtmstatusId).HasColumnName("ProjectCTMStatusId");

                entity.Property(e => e.TaskCode).IsRequired();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("projects_createdby_fkey");

                entity.HasOne(d => d.LegalEntity)
                    .WithMany(p => p.ProjectLegalEntities)
                    .HasForeignKey(d => d.LegalEntityId)
                    .HasConstraintName("Projects_LegalEntityId_fkey");

                entity.HasOne(d => d.ModifieddByNavigation)
                    .WithMany(p => p.ProjectModifieddByNavigations)
                    .HasForeignKey(d => d.ModifieddBy)
                    .HasConstraintName("projects_modifieddby_fkey");

                entity.HasOne(d => d.ProjectStatus)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.ProjectStatusId)
                    .HasConstraintName("projects_projectstatusid_fkey");

                entity.HasOne(d => d.ProjectType)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.ProjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projects_projecttypeid_fkey");

                entity.HasOne(d => d.Sbu)
                    .WithMany(p => p.ProjectSbus)
                    .HasForeignKey(d => d.SbuId)
                    .HasConstraintName("Projects_SbuId_fkey");
            });

            modelBuilder.Entity<ProjectCredDetail>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("ProjectCredDetails_pkey");

                entity.ToTable("ProjectCredDetails", "DP");

                entity.HasIndex(e => e.TargetEntityName, "projectcreddetails_targetentityname");

                entity.Property(e => e.ProjectId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectCredDetailCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("projectcredinfo_createdby_fkey");

                entity.HasOne(d => d.EngagementType)
                    .WithMany(p => p.ProjectCredDetails)
                    .HasForeignKey(d => d.EngagementTypeId)
                    .HasConstraintName("ProjectCredDetails_EngagementTypeId_fkey");

                entity.HasOne(d => d.ModifieddByNavigation)
                    .WithMany(p => p.ProjectCredDetailModifieddByNavigations)
                    .HasForeignKey(d => d.ModifieddBy)
                    .HasConstraintName("projectcredinfo_modifieddby_fkey");

                entity.HasOne(d => d.Project)
                    .WithOne(p => p.ProjectCredDetail)
                    .HasForeignKey<ProjectCredDetail>(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectcredinfo_projectid_fkey");
            });

            modelBuilder.Entity<ProjectCredLookup>(entity =>
            {
                entity.ToTable("ProjectCredLookups", "DP");

                entity.HasIndex(e => e.ProjectId, "Index_ProjectId");

                entity.HasIndex(e => e.ProjectId, "projectcredlookups_projectid");

                entity.HasIndex(e => e.TaxonomyId, "projectcredlookups_taxonomyid");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectCredLookupCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("projectcredlookups_createdby_fkey");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ProjectCredLookupModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("projectcredlookups_modifiedby_fkey");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectCredLookups)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectcredlookups_projectid_fkey");

                entity.HasOne(d => d.Taxonomy)
                    .WithMany(p => p.ProjectCredLookups)
                    .HasForeignKey(d => d.TaxonomyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectcredlookups_taxonomyid_fkey");
            });

            modelBuilder.Entity<ProjectCtmDetail>(entity =>
            {
                entity.HasKey(e => e.ProjectCtmId)
                    .HasName("ProjectCtmDetails_pkey");

                entity.ToTable("ProjectCtmDetails", "DP");

                entity.Property(e => e.ProjectCtmId).UseIdentityAlwaysColumn();

                entity.Property(e => e.Ebitda).HasColumnName("EBITDA");

                entity.Property(e => e.EvEbitda).HasColumnName("EvEBITDA");

                entity.Property(e => e.ModifiedOn).HasColumnType("time with time zone");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectCtmDetailCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProjectCtmDetails_CreatedBy_fkey");

                entity.HasOne(d => d.CtmControllingType)
                    .WithMany(p => p.ProjectCtmDetailCtmControllingTypes)
                    .HasForeignKey(d => d.CtmControllingTypeId)
                    .HasConstraintName("ProjectCtmDetails_CtmControllingTypeId_fkey");

                entity.HasOne(d => d.CtmDealType)
                    .WithMany(p => p.ProjectCtmDetailCtmDealTypes)
                    .HasForeignKey(d => d.CtmDealTypeId)
                    .HasConstraintName("ProjectCtmDetails_CtmDealTypeId_fkey");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ProjectCtmDetailCurrencies)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("ProjectCtmDetails_CurrencyId_fkey");

                entity.HasOne(d => d.DuplicateDisputeRequest)
                    .WithMany(p => p.ProjectCtmDetailDuplicateDisputeRequests)
                    .HasForeignKey(d => d.DuplicateDisputeRequestId)
                    .HasConstraintName("ProjectCtmDetails_DisputeRequestId_fkey");

                entity.HasOne(d => d.DuplicateWfStatus)
                    .WithMany(p => p.ProjectCtmDetailDuplicateWfStatuses)
                    .HasForeignKey(d => d.DuplicateWfStatusId)
                    .HasConstraintName("ProjectCtmDetails_DuplicateWfStatusId_fkey");

                entity.HasOne(d => d.ErrorDataWfStatus)
                    .WithMany(p => p.ProjectCtmDetailErrorDataWfStatuses)
                    .HasForeignKey(d => d.ErrorDataWfStatusId)
                    .HasConstraintName("ProjectCtmDetails_ErrorDataWfStatusId_fkey");

                entity.HasOne(d => d.ErrorDisputeRequest)
                    .WithMany(p => p.ProjectCtmDetailErrorDisputeRequests)
                    .HasForeignKey(d => d.ErrorDisputeRequestId)
                    .HasConstraintName("ProjectCtmDetails_ErrorDisputeRequestId_fkey");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ProjectCtmDetailModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("ProjectCtmDetails_ModifiedBy_fkey");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectCtmDetails)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProjectCtmDetails_ProjectId_fkey");

                entity.HasOne(d => d.SourceOfMultiple)
                    .WithMany(p => p.ProjectCtmDetailSourceOfMultiples)
                    .HasForeignKey(d => d.SourceOfMultipleId)
                    .HasConstraintName("ProjectCtmDetails_SourceOfMultipleId_fkey");

                entity.HasOne(d => d.TargetListedType)
                    .WithMany(p => p.ProjectCtmDetailTargetListedTypes)
                    .HasForeignKey(d => d.TargetListedTypeId)
                    .HasConstraintName("ProjectCtmDetails_TargetListedTypeId_fkey");
            });

            modelBuilder.Entity<ProjectCtmLookup>(entity =>
            {
                entity.ToTable("ProjectCtmLookups", "DP");

                entity.Property(e => e.ProjectCtmLookupId).UseIdentityAlwaysColumn();

                entity.Property(e => e.CreatedOn).HasColumnType("time with time zone");

                entity.Property(e => e.ModifiedOn).HasColumnType("time with time zone");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectCtmLookupCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProjectCtmLookups_CreatedBy_fkey");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ProjectCtmLookupModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("ProjectCtmLookups_ModifiedBy_fkey");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectCtmLookups)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProjectCtmLookups_ProjectId_fkey");
            });

            modelBuilder.Entity<ProjectMailDetail>(entity =>
            {
                entity.HasKey(e => e.ProjectEmailId)
                    .HasName("ProjectMailDetails_pkey");

                entity.ToTable("ProjectMailDetails", "DP");

                entity.Property(e => e.ProjectEmailId).ValueGeneratedNever();

                entity.HasOne(d => d.EmailTemplate)
                    .WithMany(p => p.ProjectMailDetails)
                    .HasForeignKey(d => d.EmailTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProjectEmail_EmialTemplate");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectMailDetails)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProjectEmail_Project");
            });

            modelBuilder.Entity<ProjectPublicWebsite>(entity =>
            {
                entity.ToTable("ProjectPublicWebsites", "DP");

                entity.Property(e => e.WebsiteUrl).IsRequired();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectPublicWebsiteCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("projectpublicwebsites_createdby_fkey");

                entity.HasOne(d => d.ModifieddByNavigation)
                    .WithMany(p => p.ProjectPublicWebsiteModifieddByNavigations)
                    .HasForeignKey(d => d.ModifieddBy)
                    .HasConstraintName("projectpublicwebsites_modifieddby_fkey");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectPublicWebsites)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectpublicwebsites_projectid_fkey");
            });

            modelBuilder.Entity<ProjectType>(entity =>
            {
                entity.ToTable("ProjectTypes", "DP");

                entity.Property(e => e.ProjectTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProjectWfAction>(entity =>
            {
                entity.ToTable("ProjectWfActions", "DP");

                entity.Property(e => e.ProjectWfActionId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<ProjectWfLog>(entity =>
            {
                entity.ToTable("ProjectWfLogs", "DP");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProjectWfLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectwflogs_createdby_fkey");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectWfLogs)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectwflogs_projectid_fkey");

                entity.HasOne(d => d.ProjectWfAction)
                    .WithMany(p => p.ProjectWfLogs)
                    .HasForeignKey(d => d.ProjectWfActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectwflogs_projectwfactionId_fkey");

                entity.HasOne(d => d.ProjectWfStatustype)
                    .WithMany(p => p.ProjectWfLogs)
                    .HasForeignKey(d => d.ProjectWfStatustypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectwflogs_projectwfstatustypeid_fkey");
            });

            modelBuilder.Entity<ProjectWfNextAction>(entity =>
            {
                entity.ToTable("ProjectWfNextActions", "DP");

                entity.Property(e => e.ProjectWfNextActionId).ValueGeneratedNever();

                entity.HasOne(d => d.ProjectWfAction)
                    .WithMany(p => p.ProjectWfNextActions)
                    .HasForeignKey(d => d.ProjectWfActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectwfnextactions_projectwfactionId_fkey");

                entity.HasOne(d => d.ProjectWfStatusType)
                    .WithMany(p => p.ProjectWfNextActions)
                    .HasForeignKey(d => d.ProjectWfStatusTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("projectwfnextactions_projectwfstatustypeid_fkey");
            });

            modelBuilder.Entity<ProjectWfStatusType>(entity =>
            {
                entity.ToTable("ProjectWfStatusTypes", "DP");

                entity.Property(e => e.ProjectWfStatusTypeId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<ProjectWfUserTypeAction>(entity =>
            {
                entity.ToTable("ProjectWfUserTypeActions", "DP");

                entity.Property(e => e.ProjectWfUserTypeActionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProjectsAuditLog>(entity =>
            {
                entity.HasKey(e => e.Uid)
                    .HasName("Projects_AuditLog_pkey");

                entity.ToTable("Projects_AuditLog", "DP");

                entity.Property(e => e.Uid)
                    .ValueGeneratedNever()
                    .HasColumnName("uid");

                entity.Property(e => e.DmlCreatedBy)
                    .HasMaxLength(255)
                    .HasColumnName("dml_created_by");

                entity.Property(e => e.DmlTimestamp)
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("dml_timestamp");

                entity.Property(e => e.IsModified).HasColumnName("is_modified");

                entity.Property(e => e.ModificationType).HasColumnName("modification_type");

                entity.Property(e => e.NewRowData)
                    .HasColumnType("jsonb")
                    .HasColumnName("new_row_data");

                entity.Property(e => e.OldRowData)
                    .HasColumnType("jsonb")
                    .HasColumnName("old_row_data");

                entity.Property(e => e.Projectid).HasColumnName("projectid");

                entity.Property(e => e.SrcTableName).HasColumnName("src_table_name");

                entity.Property(e => e.DmlType).HasColumnName("dml_type");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Roles", "DP");

                entity.Property(e => e.RoleId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.RoleCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("roles_createdby_fkey");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.RoleModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("roles_updatedby_fkey");
            });

            modelBuilder.Entity<SbuLeader>(entity =>
            {
                entity.ToTable("SbuLeaders", "DP");

                entity.Property(e => e.SbuLeaderId).ValueGeneratedNever();

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<SbuMonthlySummaryConfig>(entity =>
            {
                entity.HasKey(e => e.SbuId)
                    .HasName("SbuMonthlySummaryConfig_pkey");

                entity.ToTable("SbuMonthlySummaryConfig", "DP");

                entity.Property(e => e.SbuId).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<ShorDescClenup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ShorDescClenup", "DP");
            });

            modelBuilder.Entity<Taxonomy>(entity =>
            {
                entity.ToTable("Taxonomy", "DP");

                entity.Property(e => e.Description).IsRequired();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Taxonomies)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("Taxonomy_categoryid_fkey");
            });

            modelBuilder.Entity<TaxonomyCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_TaxonomyCategory");

                entity.ToTable("TaxonomyCategories", "DP");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<TaxonomyEngagementType>(entity =>
            {
                entity.ToTable("TaxonomyEngagementTypes", "DP");

                entity.HasOne(d => d.EngagementType)
                    .WithMany(p => p.TaxonomyEngagementTypes)
                    .HasForeignKey(d => d.EngagementTypeId)
                    .HasConstraintName("taxonomyengagementyypes_engagementtypeId_fkey");

                entity.HasOne(d => d.Taxonomy)
                    .WithMany(p => p.TaxonomyEngagementTypes)
                    .HasForeignKey(d => d.TaxonomyId)
                    .HasConstraintName("taxonomyengagementyypes_taxonomyid_fkey");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("Users", "DP");

                entity.HasIndex(e => new { e.Email, e.IsDeleted }, "users_email_isdeleted_key")
                    .IsUnique();

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.FirstName).IsRequired();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("Users_RoleId_fkey");
            });

            modelBuilder.Entity<UserType>(entity =>
            {
                entity.HasKey(e => e.UserTypid)
                    .HasName("PK_UserType");

                entity.ToTable("UserTypes", "DP");

                entity.Property(e => e.UserTypid).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<VwCredProjUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwCredProjUsers", "DP");
            });

            modelBuilder.Entity<VwCtmProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwCtmProjects", "DP");
            });

            modelBuilder.Entity<VwProjClientEntityType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjClientEntityType", "DP");
            });

            modelBuilder.Entity<VwProjDealType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjDealType", "DP");
            });

            modelBuilder.Entity<VwProjDealValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjDealValue", "DP");
            });

            modelBuilder.Entity<VwProjDiscloseEntityName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjDiscloseEntityName", "DP");
            });

            modelBuilder.Entity<VwProjDownload>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjDownload", "DP");

                entity.Property(e => e.ClientOrClientUltimateParentEntityDomicileCountryRegion).HasColumnName("Client or Client Ultimate Parent entity domicile country/region");

                entity.Property(e => e.DealsSbu).HasColumnName("Deals SBU");

                entity.Property(e => e.DomicileCountryRegionOfTarget).HasColumnName("Domicile country/region of Target");

                entity.Property(e => e.LTB).HasColumnName("LTB");

                entity.Property(e => e.NatureOfTransactionDealNatureOfWorkNonDeal).HasColumnName("Nature of Transaction (Deal) / Nature of Work (Non Deal)");

                entity.Property(e => e.PwClegalEntity).HasColumnName("PwCLegalEntity");

                entity.Property(e => e.ShortDescription).HasColumnName("Short Description");

                entity.Property(e => e.TargetEntityType).HasColumnName("Target Entity Type");
            });

            modelBuilder.Entity<VwProjNatureOfEngagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjNatureOfEngagement", "DP");
            });

            modelBuilder.Entity<VwProjParentRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjParentRegion", "DP");
            });

            modelBuilder.Entity<VwProjProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjProducts", "DP");
            });

            modelBuilder.Entity<VwProjSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjSector", "DP");
            });

            modelBuilder.Entity<VwProjSubSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjSubSector", "DP");
            });

            modelBuilder.Entity<VwProjTargetEntityType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjTargetEntityType", "DP");
            });

            modelBuilder.Entity<VwProjTransactionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjTransactionStatus", "DP");
            });

            modelBuilder.Entity<VwProjWorkRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjWorkRegion", "DP");
            });

            modelBuilder.Entity<VwProjectCred>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjectCreds", "DP");

                entity.Property(e => e.DealsSbu).HasColumnName("DealsSBU");
            });

            modelBuilder.Entity<VwProjectCredLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjectCredLookups", "DP");
            });

            modelBuilder.Entity<VwProjectCredsV2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjectCredsV2", "DP");

                entity.Property(e => e.DealsSbu).HasColumnName("DealsSBU");
            });

            modelBuilder.Entity<VwProjectRestrictedReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwProjectRestrictedReasons", "DP");
            });

            modelBuilder.Entity<VwPvtTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VwPvtTest", "DP");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}